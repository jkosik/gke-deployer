name: gke-deploy

on:
  push:
    branches-ignore:
      - 'docs'
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  pull_request:
    branches-ignore:
      - 'docs'


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  #TF_LOG: DEBUG
  DIR_INFRA: ./infrastructure
  DIR_CONF: ./configuration
  INFRA_ENV: ${GITHUB_REF##*/}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_}}${{ INFRA_ENV }}

jobs:
  # prod-check:
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "Deploying from branch $GITHUB_REF"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    container: jkosik/terraform:1.0.1
    steps:
      # - name: Set global variables
      #   run: |
      #     if [ $GITHUB_REF == 'refs/heads/main' ]; then
      #       export INFRA_ENV=prod
      #     fi
      #     if [ $GITHUB_REF == 'refs/heads/stage' ]; then 
      #       export INFRA_ENV=stage
      #     fi
      #     if [ $GITHUB_REF == 'refs/heads/dev' ]; then 
      #       export INFRA_ENV=dev
      #     fi

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform fmt
        run: |
          terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.DIR_INFRA }}          

      - name: Terraform validate
        run: terraform validate -no-color
        working-directory: ${{ env.DIR_INFRA }}          

      - name: Terraform plan and apply
        run: |
          terraform plan -var-file=$INFRA_ENV.tfvars
          terraform apply -auto-approve -var-file=$INFRA_ENV.tfvars
        working-directory: ${{ env.DIR_INFRA }}

  healthchecks:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    container: jkosik/gcp-deployer:346.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Set up GCP Cloud SDK for Client
      #   uses: google-github-actions/setup-gcloud@master
      #   with:
      #     service_account_key: ${{ secrets.GCP_SA_PROD }}

      - name: Check GKE readiness
        run: |
          GKE_CLUSTER_NAME=$(cat $INFRA_ENV.tfvars | grep gke_cluster_name | cut -d\" -f2)
          c=0
          while true; do
            while [[ $(gcloud container clusters describe ${{ env.GKE_CLUSTER_NAME }} --format="value(status)") != "RUNNING" ]] ; do
              ((c++)) && ((c>60)) && printf "Timeout to deploy K8S cluster exceeded\n" && exit 1
              sleep 5
              echo "Checking K8S cluster build..."
            done
            echo "K8S cluster ${{ env.GKE_CLUSTER_NAME }} in RUNNING state"
            break
          done;
        working-directory: ${{ env.DIR_INFRA }}      