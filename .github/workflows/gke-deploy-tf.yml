name: gke-deploy

on:
  push:
    branches-ignore:
      - 'docs'
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  pull_request:
    branches-ignore:
      - 'docs'


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  #TF_LOG: DEBUG
  CONF_DIR: configuration
  INFRA_DIR: infrastructure
  INFRA_ENV: ${GITHUB_REF##*/}
  GOOGLE_CREDENTIALS: "${{ secrets.GCP_SA }}"

jobs:
  # prod-check:
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "Deploying from branch $GITHUB_REF"

  infrastructure:
    runs-on: ubuntu-latest
    container: jkosik/terraform:1.0.1
    steps:
      - name: Environment setting
        run: |
          echo $GITHUB_HEAD_REF
          echo Current ENV and source Branch is: ${{ env.INFRA_ENV }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform fmt
        run: |
          terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.INFRA_DIR }}

      - name: Terraform validate
        run: terraform validate -no-color
        working-directory: ${{ env.INFRA_DIR }}

      - name: Terraform plan and apply
        run: |
          terraform plan -var-file=${{ env.INFRA_ENV }}.tfvars
          terraform apply -auto-approve -var-file=${{ env.INFRA_ENV }}.tfvars
        working-directory: ${{ env.INFRA_DIR }}

  infrastructure-healthcheck:
    needs: infrastructure
    runs-on: ubuntu-latest
    container: jkosik/gcp-deployer:346.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Populate variables
        run: |
          echo "PROJECT_ID=$(cat ${{ env.INFRA_ENV }}.tfvars | grep project_id | cut -d\" -f2)" >> $GITHUB_ENV
          echo "ZONE=$(cat ${{ env.INFRA_ENV }}.tfvars | grep zone | cut -d\" -f2)" >> $GITHUB_ENV
          echo "GKE_CLUSTER_NAME=$(cat ${{ env.INFRA_ENV }}.tfvars | grep gke_cluster_name | cut -d\" -f2)" >> $GITHUB_ENV
        working-directory: ${{ env.INFRA_DIR }}

      - name: Set up GCP Cloud SDK for Client
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA }}

      - name: Check GKE readiness
        run: |
          c=0
          while true; do
            while [[ $(gcloud container clusters describe ${GKE_CLUSTER_NAME} --zone $ZONE --project $PROJECT_ID --format="value(status)") != "RUNNING" ]] ; do
              ((c++)) && ((c>60)) && printf "Timeout to deploy K8S cluster exceeded\n" && exit 1
              sleep 5
              echo "Checking K8S cluster build..."
            done
            echo "K8S cluster ${GKE_CLUSTER_NAME} in RUNNING state"
            break
          done;
        working-directory: ${{ env.INFRA_DIR }}

  configuration:
    needs: infrastructure-healthcheck
    runs-on: ubuntu-latest
    container: jkosik/ansible:4.2.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Populate variables
        run: |
          echo "PROJECT_ID=$(cat ${{ env.INFRA_ENV }}.tfvars | grep project_id | cut -d\" -f2)" >> $GITHUB_ENV
          echo "ZONE=$(cat ${{ env.INFRA_ENV }}.tfvars | grep zone | cut -d\" -f2)" >> $GITHUB_ENV
        working-directory: ${{ env.INFRA_DIR }}

      - name: Ansible lint
        run: |
          ansible-lint *.{yml,yaml}
        continue-on-error: true

      - name: Set up GCP Cloud SDK for Client
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA }}

      - name: Configure SSH Agent
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}

      - name: Configure components
        run: |
          JH_IP=$(gcloud compute instances describe jh --zone $ZONE --project $PROJECT_ID --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          sed s/CHANGEME/$JH_IP/g inventory-template.yml > inventory-ephemeral.yml
          ansible-playbook -u user -i inventory-ephemeral.yml site.yml --extra-vars infra_env="${{ env.INFRA_ENV }}"
        working-directory: ${{ env.CONF_DIR }}

  terraform-import:
    needs: configuration
    runs-on: ubuntu-latest
    container: jkosik/terraform:1.0.1
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Set up GCP Cloud SDK for Client
      #   uses: google-github-actions/setup-gcloud@master
      #   with:
      #     service_account_key: ${{ secrets.GCP_SA }}

      - name: Import kubeconfig Secret from Secret Manager to Terraform
        run: |
          pwd
          ls
          chmod a+x ./import-kubeconfig-secret.sh
          ./import-kubeconfig-secret.sh ${{ env.INFRA_ENV }}
        #working-directory: ${{ env.INFRA_DIR }}

  configuration-healthcheck:
    needs: configuration
    runs-on: ubuntu-latest
    container: jkosik/gcp-deployer:346.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Populate variables
        run: |
          echo "PROJECT_ID=$(cat ${{ env.INFRA_ENV }}.tfvars | grep project_id | cut -d\" -f2)" >> $GITHUB_ENV
          echo "ZONE=$(cat ${{ env.INFRA_ENV }}.tfvars | grep zone | cut -d\" -f2)" >> $GITHUB_ENV
        working-directory: ${{ env.INFRA_DIR }}

      - name: Set up GCP Cloud SDK for Client
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA }}

      - name: Configure SSH Agent
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}

      - name: Run gcloud and kubectl
        run: |
          JH_IP=$(gcloud compute instances describe jh --zone $ZONE --project $PROJECT_ID --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          ssh -o StrictHostKeyChecking=no user@$JH_IP 'gcloud compute instances list'
          ssh -o StrictHostKeyChecking=no user@$JH_IP 'kubectl get ns'